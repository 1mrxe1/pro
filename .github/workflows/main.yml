name: Python Bot

on:
  workflow_dispatch:
  schedule:
    - cron: "0 */6 * * *"

jobs:
  run-bot:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          pip install watchdog
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Run bot with live sync
        run: |
          cat > watcher.py <<'EOF'
          import time
          import subprocess
          import os
          from watchdog.observers import Observer
          from watchdog.events import FileSystemEventHandler

          class ChangeHandler(FileSystemEventHandler):
              def on_modified(self, event):
                  self.sync_changes(event)

              def on_created(self, event):
                  self.sync_changes(event)

              def sync_changes(self, event):
                  # Ignore directories and subdirectories
                  if event.is_directory:
                      return
                  if os.path.dirname(event.src_path) != os.getcwd():
                      return
                  
                  print(f"Detected change: {os.path.basename(event.src_path)}")
                  time.sleep(3)
                  
                  # Auto-configure git
                  subprocess.run(["git", "config", "--global", "user.name", "github-actions[bot]"])
                  subprocess.run(["git", "config", "--global", "user.email", "github-actions[bot]@users.noreply.github.com"])
                  
                  # Sync with repository
                  subprocess.run(["git", "add", "."])
                  subprocess.run(["git", "commit", "-m", "Auto-sync detected changes"])
                  subprocess.run(["git", "push"])

          observer = Observer()
          observer.schedule(ChangeHandler(), path=".", recursive=False)
          observer.start()

          try:
              subprocess.run(["python", "main.py"])
          except KeyboardInterrupt:
              pass
          finally:
              observer.stop()
              observer.join()
          EOF

          python watcher.py
